#!/usr/bin/perl
use strict;
use warnings;
use Zeta::Serializer::JSON;
use Carp;
use IO::Socket::INET;
use Zeta::Run;
use DBI;
use Carp;
use Zero::Tran;
use Zeta::IPC::MsgQ;

#
# 加载银行配置
#
my $bank = do "$ENV{ZERO_HOME}/conf/bank.conf";
confess "can not do file[bank.conf] error[$@]" if $@;

#
# 加载渠道配置
#
my $chnl = do "$ENV{ZERO_HOME}/conf/chnl.conf";
confess "can not do file[chnl.conf] error[$@]" if $@;

#
# 返回值
#
my $cfg = {
    # 数据库配置 
    db => {
        dsn    => "dbi:DB2:$ENV{DB_NAME}",
        user   => "$ENV{DB_USER}",
        pass   => "$ENV{DB_PASS}",
        schema => "$ENV{DB_SCHEMA}",
    },

    # 数据库操作, zsetup添加-子进程prepare sth
    dbo => undef,
    dbh => undef,

    # 监控队列
    monq  => zkernel->logger_monq(),

    # 监控服务器配置
    msvr  => {
        host => 127.0.0.1,
        port => 7896   
    },

    # stomp消息队列
    stomp => {
        host  => '127.0.0.1',
        port  => '61612',
    },

    # 后线交易备份消息队列 
    backend => 'zero.backend',

    # 渠道,银行,交易处理
    chnl  => $chnl,   # 渠道对象集合
    bank  => $bank,   # 银行对象集合
    tran  => Zero::Tran->new(),  # 业务控制+路由
};

#
# 获取应用配置
#
helper zconfig => sub { $cfg };

#
# 连接数据库
#
helper dbh  => sub {
    my $cfg = zkernel->zconfig();
    my $dbh = DBI->connect(
        @{$cfg->{db}}{qw/dsn user pass/},
        {
            RaiseError       => 1,
            PrintError       => 0,
            AutoCommit       => 0,
            FetchHashKeyName => 'NAME_lc',
            ChopBlanks       => 1,
            InactiveDestroy  => 1,
        }
    );
    unless($dbh) {
        zlogger->error("can not connet db[@{$cfg->{db}}{qw/dsn user pass/}], quit");
        exit 0;
    }

    # 设置默认schema
    $dbh->do("set current schema $cfg->{db}->{schema}")
        or confess "can not set current schema $cfg->{db}->{schema}";
    return $dbh;
};

#
# 连接stomp
#
helper zstomp => sub {
    my $cfg = shift->zconfig();
    # 连接stomp
    my $stp = Net::Stomp->new({
        hostname => $zcfg->{stomp}{host},
        port     => $zcfg->{stomp}{port} ,
    }) or confess <<EOF;
Net::Stomp failed with 
    { 
        hostname => $cfg->{stomp}{host}, 
        port     => $cfg->{stomp}{port} 
}
EOF
    $stp->connect({ login => 'hello', passcode => 'there' });
    return $stp;
};


#
# 子进程zsetup: 
# 1> 连接数据库
# 2> 子进程的sql statement
#
helper zsetup => sub {
    my $zcfg = zkernel->zconfig();
    $zcfg->{dbh} = zkernel->dbh();

    # name hash
    my $nhash = $zcfg->{dbh}->prepare("select * from log_txn")->{NAME_lc_hash};
    delete @{$nhash}{qw/ts_u tdate/};
    my %nhash = reverse %$nhash;
    my @idx = sort {int($a) <=> int($b)} keys %nhash;
    my @fld = @nhash{@idx};
    my $fldstr  = join ',', @fld;
    my $markstr = join ',', ('?') x @fld;

    # 准备SQL
    my $sql_ilog     = "insert into log_txn($fldstr) values($markstr)";
    my $sql_ulog_rev = "update log_txn set rev_flag = 1 where b_tkey = ?";
    my $sql_ulog_can = "update log_txn set can_flag = 1 where b_tkey = ?";

    # prepare
    my $sth_ilog     = $zcfg->{dbh}->prepare($sql_ilog);
    my $sth_ulog_rev = $zcfg->{dbh}->prepare($sql_ulog_rev);
    my $sth_ulog_can = $zcfg->{dbh}->prepare($sql_ulog_rev);

    # 增加了dbo => {
    #     ilog     => sub { ... },
    #     ulog_rev => sub { ... },
    #     ulog_can => sub { ... },
    # }
    #
    # 插入流水的statement
    # 更新流水-为冲正
    # 更新流水-为撤销
    $zcfg->{dbo}{ilog} = sub {
        my $log = shift;
        my @val = (undef) x @fld;
        $val[$nhash->{$_}] = $log->{$_} for (keys %$log);
        $sth_ilog->execute(@val);
    };
    $zcfg->{dbo}{ulog_rev} = sub { $sth_ulog_rev->execute(+shift); };
    $zcfg->{dbo}{ulog_can} = sub { $sth_ulog_can->execute(+shift); };
};

$cfg;

__END__

dev vs configuration

